#!/bin/sh
# License: BSD
# Authors: Joshua Smith (joshms@ixsystems.com) & Kris Moore (kris@ixsystems.com) & Vester Thacker (vimanuelt@fastmail.fm)
########################################################
# This script is fairly linear, it will walk through a series of questions
# and when finished, generate a pc-sysinstall script

#See if this is a branded bootup and use that name
BRAND="GhostBSD"
##if [ -e "/var/db/ghostbsd-manifest.json" ] ; then
##  _tmp=`jq -r '."os_name"' "/var/db/ghostbsd-manifest.json"`
##  if [ -n "${_tmp}" -a "${_tmp}" != "null" ] ; then
##    BRAND="${_tmp}"
##  fi
##fi

# Dialog menu title
TITLE="${BRAND} Install Dialog"

# pc-sysinstall config file to write out to
CFGFILE="/tmp/sys-install.cfg"

# Default ZFS layout
ZFSLAYOUT="/(compress=lz4|atime=off),/tmp(compress=lz4),/usr(canmount=off|mountpoint=none),/usr/home(compress=lz4),/usr/jails(compress=lz4),/usr/obj(compress=lz4),/usr/ports(compress=lz4),/usr/src(compress=lz4),/var(canmount=off|atime=on|mountpoint=none),/var/audit(compress=lz4),/var/log(compress=lz4),/var/mail(compress=lz4),/var/tmp(compress=lz4)"

# Ugly master list of settable ZFS properties
ZPROPS="aclinherit(discard|noallow|restricted|passthrough|passthrough-x),aclmode(discard|groupmask|passthrough|restricted),atime(on|off),canmount(on|off|noauto),checksum(on|off|fletcher2|fletcher4|sha256),compress(on|off|lzjb|gzip|zle|lz4),copies(1|2|3),dedup(on|off|verify|sha256),exec(on|off),primarycache(all|none|metadata),readonly(on|off),secondarycache(all|none|metadata),setuid(on|off),sharenfs(on|off),logbias(latency|throughput),snapdir(hidden|visible),sync(standard|always|disabled),jailed(off|on)"

# Location of pc-sysinstall
PCSYS="/usr/local/sbin/pc-sysinstall"

# The current ZPOOL type should default to single
ZPOOL_TYPE="single"

# Set the default boot-manager
SYSBOOTMANAGER="BSD"

# Set the default ashift / ZFS blocksize
ASHIFTSIZE="12"

# Set location of post-install json commands
PIJSON="/root/post-install-commands.json"

# Default swapsize in MB
SWAPSIZE="4000"

# Default boot pool name (before loading manifest)
POOLNAME="zroot"
zpool list -H -o name | grep -q "${POOLNAME}"
if [ $? -eq 0 ] ; then
  POOLNAME="zboot" #fallback default if the original default is already in-use
fi

# Set location of default GhostBSD Manifest
GHOSTBSD_MANIFEST="/root/ghostbsd-manifest.json"

# Displays the exit message and return to start menu
exit_to_menu()
{
  # Echo the exit message for the users benefit
  echo "Exit Message: $1"
  start_menu_loop
}


rtn()
{
  echo "Press ENTER to continue"
  read tmp
}

change_zpool()
{
  get_zpool_menu
  gen_pc-sysinstall_cfg
}

get_zpool_menu()
{
  while :
  do
    dOpts="done \"Exit storage pool menu\" single \"Convert to single-disk\""

    diskTot=`${PCSYS} disk-list | wc -l | awk '{print $1}'`
    if [ $diskTot -gt 1 ] ; then
      dOpts="$dOpts stripe \"Convert to stripe\" mirror \"Convert to mirror\" raidz1 \"Convert to raidz1\""
    fi
    if [ $diskTot -gt 2 ] ; then
      dOpts="$dOpts raidz2 \"Convert to raidz2\""
    fi
    if [ $diskTot -gt 3 ] ; then
      dOpts="$dOpts raidz3 \"Convert to raidz3\""
    fi

    get_dlg_ans "--menu \"Current storage pool: $ZPOOL_TYPE - $SYSDISK $ZPOOL_DISKS\" 20 50 10 ${dOpts}"
    if [ -z "$ANS" ] ; then
       exit_to_menu "Invalid option selected."
    fi
    case $ANS in
       done) break ;;
     single) ZPOOL_DISKS=""
             ZPOOL_TYPE="single"
             ;;
     mirror) get_zpool_disks "mirror" "1" ;;
     stripe) get_zpool_disks "stripe" "1" ;;
     raidz1) get_zpool_disks "raidz1" "1" ;;
     raidz2) get_zpool_disks "raidz2" "2" ;;
     raidz3) get_zpool_disks "raidz3" "3" ;;
          *) ;;
    esac
  done
}

change_zpool_cfg()
{
  get_zpool_cfg_menu
  gen_pc-sysinstall_cfg
}

get_zpool_cfg_menu()
{
  while :
  do
    dOpts="done \"Exit pool config menu\" 9 \"512b Blocks\""
    dOpts="$dOpts 12 \"4K Blocks\" 13 \"8K Blocks\" 14 \"16K Blocks\""

    get_dlg_ans "--menu \"Select the pool blocksize (current: $ASHIFTSIZE)\" 20 50 10 ${dOpts}"
    if [ -z "$ANS" ] ; then
       exit_to_menu "Invalid option selected."
    fi
    case $ANS in
       done) break ;;
          *) ASHIFTSIZE="$ANS" ;;
    esac
  done
}

change_zpool_name() {
  while :
  do
    #Ask for user name and make sure it is not empty
    get_dlg_ans "--inputbox 'Enter a ZFS pool name' 8 40 ${POOLNAME}"
    if [ -z "$ANS" ] ; then
       echo "Invalid name entered." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    #check for invalid characters
    echo "$ANS" | grep -q '^[a-zA-Z0-9]*$'
    if [ $? -eq 1 ] ; then
       echo "Name contains invalid characters." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    POOLNAME="$ANS"
    break
  done
}

get_zpool_disks() {
  local type=$1
  local min=$2

  while :
  do
    dOpts=""

    ${PCSYS} disk-list > /tmp/.dList.$$
    while read i
    do
      # Get the disk dev
      d=`echo $i | cut -d ':' -f 1`

      # Dont need to list the existing target disk
      if [ "$SYSDISK" = "$d" ] ; then continue ; fi

      # Get the disk description
      desc=`echo $i | cut -d ':' -f 2`
      size="`${PCSYS} disk-info $d | grep size | cut -d '=' -f 2`MB"
      dOpts="$dOpts $d \"$desc ($size)\" off"
    done < /tmp/.dList.$$
    rm /tmp/.dList.$$


    get_dlg_ans_no_exit "--single-quoted --checklist \"Select at least $min additional disks for $type\" 22 45 15 ${dOpts}"
    if [ $? -ne 0 ] ; then break; fi

     ANS=`echo $ANS | sed "s|'||g"`

     count=`echo $ANS | wc -w | awk '{print $1}'`
     if [ $count -lt $min ] ; then
        echo "Please select at least $min additional disks."
	rtn
        continue
     fi

     ZPOOL_DISKS="$ANS"
     ZPOOL_TYPE="$type"
     break
  done
}

change_zfs()
{
  get_zfs_layout
  gen_pc-sysinstall_cfg
}

get_zfs_layout()
{
  while :
  do
    dOpts="done \"Exit dataset menu\" add \"New ZFS dataset\""
    for z in `echo $ZFSLAYOUT | sed 's|,| |g'`
    do
       d=`echo $z | cut -d '(' -f 1`
       echo "$z" | grep -q '('
       if [ $? -eq 0 ] ; then
         desc="(`echo $z | cut -d '(' -f 2`"
       else
         desc=""
       fi
       dOpts="$dOpts $d \"$desc\""
    done
    get_dlg_ans "--menu \"Select dataset to edit\" 22 78 15 ${dOpts}"
    if [ -z "$ANS" ] ; then
       exit_to_menu "Invalid dataset selected."
    fi
    case $ANS in
       done) break ;;
        add) add_dataset ;;
          *) edit_dataset "$ANS" ;;
    esac
  done
}

get_zfs_dset_opt()
{
  local changeOpt="$1"
  dOpts=""

  # Build a list of dataset options to display
  for z in `echo $ZPROPS | sed 's|,| |g'`
  do
    zOpt=`echo $z | cut -d '(' -f 1`
    if [ "$zOpt" != "$changeOpt" ] ; then continue ; fi

    zOps=`echo $z | cut -d '(' -f 2 | cut -d ')' -f 1`
    for o in `echo $zOps | sed 's,|, ,g'`
    do
       d="$o"
       desc="($o)"
       dOpts="$dOpts $d \"$desc\""
    done
    break
  done

  # Ask what to do on this dataset
  get_dlg_ans "--menu \"Set option for $changeOpt on $2\" 22 50 15 unset 'Unset this option' cancel 'Cancel' ${dOpts}"
  if [ -z "$ANS" ] ; then
     exit_to_menu "Invalid option selected."
  fi

  if [ "$ANS" = "unset" ] ; then ANS="" ; fi
  if [ "$ANS" = "cancel" ] ; then ANS="CANCELED" ; fi
  VAL=$ANS ; export VAL
}

edit_dataset()
{

  dOpts=""

  # Pull a list of dataset options from the users layout
  for z in `echo $ZFSLAYOUT | sed 's|,| |g'`
  do
     d=`echo $z | cut -d '(' -f 1`
     if [ "$d" != "$1" ] ; then continue ; fi
     curOpts="`echo $z | cut -d '(' -f 2 | cut -d ')' -f 1`"
  done

  # Build a list of dataset options to display
  for z in `echo $ZPROPS | sed 's|,| |g'`
  do
    d=`echo $z | cut -d '(' -f 1`
    desc="(unset)"
    for o in `echo $curOpts | sed 's,|, ,g'`
    do
       _opt="`echo $o | cut -d '=' -f 1`"
       if [ "$_opt" != "$d" ] ; then continue ; fi
       desc="(`echo $o | cut -d '=' -f 2`)"
    done
    dOpts="$dOpts $d \"$desc\""
  done

  # Ask what to do on this dataset
  get_dlg_ans "--menu \"Editing dataset: ${1}\" 22 50 15 delete 'Remove the dataset' cancel 'Cancel' ${dOpts}"
  if [ -z "$ANS" ] ; then
     exit_to_menu "Invalid dataset selected."
  fi
  case $ANS in
    cancel) return ;;
    delete) NEWLAYOUT=""
            for z in `echo $ZFSLAYOUT | sed 's|,| |g'`
            do
              d=`echo $z | cut -d '(' -f 1`
	      if [ "$d" = "$1" ] ; then continue ; fi
	      if [ -z "$NEWLAYOUT" ] ; then
	        NEWLAYOUT="${z}"
              else
	        NEWLAYOUT="$NEWLAYOUT,${z}"
              fi
            done
	    ZFSLAYOUT="$NEWLAYOUT"
            ;;
         *) cOpt=$ANS
	    get_zfs_dset_opt "$cOpt" "$1"
	    newOpt="$VAL"
	    if [ "$newOpt" = "CANCELED" ] ; then return ; fi

            NEWLAYOUT=""
            for z in `echo $ZFSLAYOUT | sed 's|,| |g'`
            do
               d=`echo $z | cut -d '(' -f 1`
               if [ "$d" != "$1" ] ; then
                 if [ -z "$NEWLAYOUT" ] ; then
                   NEWLAYOUT="${z}"
                 else
                   NEWLAYOUT="$NEWLAYOUT,${z}"
                 fi
	         continue
	       fi

	       # Add this option to our optList
	       NEWOPTLIST=""
	       optList="`echo $z | cut -d '(' -f 2 | cut -d ')' -f 1`"
	       if [ "$optList" = "$z" ] ; then optList="" ; fi
	       addedOpt=0
               for o in `echo $optList | sed 's,|, ,g'`
               do
                  _opt="`echo $o | cut -d '=' -f 1`"
                  if [ "$_opt" != "$cOpt" ] ; then
                     if [ -z "$NEWOPTLIST" ] ; then
                        NEWOPTLIST="${o}"
                     else
                        NEWOPTLIST="$NEWOPTLIST|${o}"
                     fi
	             continue
		  fi
		  addedOpt=1
		  # If the user unset this opt, lets skip adding it
		  if [ -z "$newOpt" ] ; then continue ; fi
                  if [ -z "$NEWOPTLIST" ] ; then
                     NEWOPTLIST="${cOpt}=${newOpt}"
                  else
                     NEWOPTLIST="$NEWOPTLIST|${cOpt}=${newOpt}"
                  fi
               done

	       # If we need to add the opt fresh
	       if [ $addedOpt -eq 0 ] ; then
                  if [ -z "$NEWOPTLIST" ] ; then
                     NEWOPTLIST="${cOpt}=${newOpt}"
                  else
                     NEWOPTLIST="$NEWOPTLIST|${cOpt}=${newOpt}"
                  fi
	       fi

               opt=""
	       if [ -n "$NEWOPTLIST" ] ; then opt="($NEWOPTLIST)"; fi
               if [ -z "$NEWLAYOUT" ] ; then
                  NEWLAYOUT="${d}${opt}"
               else
                  NEWLAYOUT="$NEWLAYOUT,${d}${opt}"
	       fi
            done
            ZFSLAYOUT="$NEWLAYOUT"
            ;;
  esac
}

add_dataset()
{
    get_dlg_ans "--inputbox 'Enter dataset mountpoint' 8 40"
    if [ -z "$ANS" ] ; then
       exit_to_menu "Invalid dataset mountpoint entered."
    fi

    # Make sure it starts with a /
    echo $ANS | grep -q "^/"
    if [ $? -ne 0 ] ; then
       return
    fi

    # Check for duplicates
    for z in `echo $ZFSLAYOUT | sed 's|,| |g'`
    do
       d=`echo $z | cut -d '(' -f 1`
       if [ "$d" = "$ANS" ] ; then
          echo "Error, this dataset already exists."
          rtn
	  return
       fi
    done

    # Save the dataset
    ZFSLAYOUT="$ZFSLAYOUT,$ANS"
}

get_dlg_ans_no_exit()
{
  TANS="/tmp/.pcinsdialog.$$"
  if [ -e "$TANS" ] ; then rm ${TANS}; fi
  if [ -e "$TANS.dlg" ] ; then rm ${TANS}.dlg; fi
  while :
  do
    echo "dialog --title \"$TITLE\" ${@}" >${TANS}.dlg
    sh ${TANS}.dlg 2>${TANS}
    local err=$?

    if [ ! -e "$TANS" ] ; then
       ANS=""
       return $err
    fi
    ANS=`cat ${TANS}`
    return $err
  done
}

get_dlg_ans()
{
  TANS="/tmp/.pcinsdialog.$$"
  if [ -e "$TANS" ] ; then rm ${TANS}; fi
  if [ -e "$TANS.dlg" ] ; then rm ${TANS}.dlg; fi
  while :
  do
    echo "dialog --title \"$TITLE\" ${@}" >${TANS}.dlg
    sh ${TANS}.dlg 2>${TANS}
    if [ $? -ne 0 ] ; then
      dialog --title "$TITLE" --yesno 'Exit the installer?' 8 30
      if [ $? -eq 0 ] ; then exit_to_menu "User canceled install" ; fi
      continue
    fi

    if [ ! -e "$TANS" ] ; then
       ANS=""
       return
    fi
    ANS=`cat ${TANS}`
    return
  done
}


get_sys_type()
{
  unset SYSTYPE
  SYSTYPE="server"
}


get_target_disk()
{
  # Now we prompt for the disk to install on
  dOpts=""
  ${PCSYS} disk-list > /tmp/.dList.$$
  while read i
  do
     fOpt="on"
     d=`echo $i | cut -d ':' -f 1`
     desc=`echo $i | cut -d ':' -f 2`
     size="`${PCSYS} disk-info $d | grep size | cut -d '=' -f 2`MB"
     dOpts="$dOpts $d \"$desc ($size)\" $fOpt"
     if [ -z "$fOpt" ] ; then fOpt="off"; fi
  done < /tmp/.dList.$$
  rm /tmp/.dList.$$
  get_dlg_ans "--radiolist \"Select target disk\" 12 50 5 ${dOpts}"
  if [ -z "$ANS" ] ; then
     exit_to_menu "Invalid disk selected."
  fi
  SYSDISK="$ANS"
}

get_hardware_info()
{

 #detect CPU
   echo "CPU Detected:" >> /tmp/.hardwareinfo.$$
   sysctl -a | egrep -i 'hw.machine|hw.model|hw.ncpu' >> /tmp/.hardwareinfo.$$
   echo " " >> /tmp/.hardwareinfo.$$

 #grep for amount of physical memory and free memory
   echo "Memory Information:" >> /tmp/.hardwareinfo.$$
   grep "real memory" /var/run/dmesg.boot | head -n 1 >> /tmp/.hardwareinfo.$$
   grep "avail memory" /var/run/dmesg.boot | head -n 1 >> /tmp/.hardwareinfo.$$
   echo " " >> /tmp/.hardwareinfo.$$

 #list detected hard disks
   echo "Detected Hard Disks:" >> /tmp/.hardwareinfo.$$
   $PCSYS disk-list >> /tmp/.hardwareinfo.$$
   echo " " >> /tmp/.hardwareinfo.$$

 #detect an active network card.  Also now lists hard disk info and checks for a sound card.
   ifconfig | grep -q 'UP'
   if [ $? -eq 0 ] ; then
     echo "Compatible Network Interface Detected:" >> /tmp/.hardwareinfo.$$
     ifconfig -l >> /tmp/.hardwareinfo.$$
     echo " " >> /tmp/.hardwareinfo.$$
     sed  -i '' 's/lo0//g' /tmp/.hardwareinfo.$$
     sed  -i '' 's/fwe//g' /tmp/.hardwareinfo.$$
     sed  -i '' 's/ipfw//g' /tmp/.hardwareinfo.$$
     sed  -i '' 's/pfsync//g' /tmp/.hardwareinfo.$$
     sed  -i '' 's/pflog//g' /tmp/.hardwareinfo.$$
     sed  -i '' 's/usbus//g' /tmp/.hardwareinfo.$$
     sed  -i '' 's/tun//g' /tmp/.hardwareinfo.$$
   else
     echo "No Compatible Network Interface Detected:" >> /tmp/.hardwareinfo.$$
     echo " " >> /tmp/.hardwareinfo.$$
   fi

 #check active sound devices
   cat /dev/sndstat | grep 'pcm0:'
      if [ $? -eq 0 ] ; then
	echo "Compatible sound devices detected:" >> /tmp/.hardwareinfo.$$
	cat /dev/sndstat >> /tmp/.hardwareinfo.$$
	echo " " >> /tmp/.hardwareinfo.$$
      else
	echo "No compatible sound devices detected."  >> /tmp/.hardwareinfo.$$
	echo " " >> /tmp/.hardwareinfo.$$
      fi
   sed -i '' '/Installed devices:/d' /tmp/.hardwareinfo.$$
   dialog --tailbox /tmp/.hardwareinfo.$$ 30 60
   rm /tmp/.hardwareinfo.$$

}


get_target_part()
{
  # Now prompt for the full-disk, partition, or free space to install onto
  ${PCSYS} disk-part $SYSDISK > /tmp/.dList.$$
  dOpts="ALL \"Use entire disk\" on"
  dOpts="$dOpts free \"Install to free space\" off"
  dFmt=`grep "$SYSDISK-format:" /tmp/.dList.$$ | awk '{print $2}'`
  if [ "$dFmt" = "MBR" ] ; then
    dChar="s"
    DISKFORMAT="MBR"
  else
    dChar="p"
    DISKFORMAT="GPT"
  fi
  i=1
  while :
  do
     partRAW="${dChar}${i}"
     part="${SYSDISK}${dChar}${i}"
     [ -e "/dev/${part}" ] || break
     desc="`cat /tmp/.dList.$$ | grep ^${part}-label | cut -d ':' -f 2`"
     mb="`cat /tmp/.dList.$$ | grep ^${part}-sizemb | awk '{print $2}'`"
     dOpts="$dOpts $partRAW \"${mb}MB -$desc\" off"
     dFmt=`grep "$SYSDISK-format:" /tmp/.dList.$$ | awk '{print $2}'`
     i="`expr $i + 1`"
  done
  rm /tmp/.dList.$$
  get_dlg_ans "--radiolist \"Select target partition\" 12 80 5 ${dOpts}"
  if [ -z "$ANS" ] ; then
     exit_to_menu "Invalid disk selected."
  fi
  DISKPART="$ANS"

  #Add a while loop that will prompt for the disk format on a full disk install
  if [ "$DISKPART" = "ALL" ] ; then
     while :
     do
	get_dlg_ans "--menu \"Select the disk format to use.\" 12 45 10 1. GPT 2. MBR"
	if [ -z "$ANS" ] ; then
	  echo "Invalid disk format entered."
	  continue
	else
	  break
	fi
    done
    if [ "1." = "$ANS" ] ; then
      DISKFORMAT="GPT"
    else
      DISKFORMAT="MBR"
    fi
  fi
}

get_root_pw()
{

# [a-z]*[A-Z]*[0-9]*[!\"$%^&*()_+=#'`@~:?<>|{}\\x5b;\\-.,\\x5d]*)+
  while :
  do
    get_dlg_ans "--passwordbox 'Enter the root password' 8 30"
    if [ -z "$ANS" ] ; then
       echo "Invalid password entered.  Please enter a valid password." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 67
       rm /tmp/.vartemp.$$
       continue
    fi
    #   Check for invalid characters
    ROOTPW="$ANS"
    get_dlg_ans "--passwordbox 'Confirm root password' 8 30"
    if [ -z "$ANS" ] ; then
       echo "Invalid password entered.  Please enter a password." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 67
       rm /tmp/.vartemp.$$
       continue
    fi
    ROOTPWCONFIRM="$ANS"
    if [ "$ROOTPWCONFIRM" = "$ROOTPW" ] ; then break; fi
    dialog --title "$TITLE" --yesno 'Password mismatch, try again?' 8 40
    if [ $? -eq 0 ] ; then continue ; fi
    exit_to_menu "Failed setting root password."
  done
}

get_user_pw()
{
  while :
  do
    get_dlg_ans "--passwordbox \"Enter the password for $USERNAME\" 8 40"
    if [ -z "$ANS" ] ; then
       echo "Invalid password entered.  Please enter a password." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    # Check for invalid characters
    USERPW="$ANS"
    get_dlg_ans "--passwordbox 'Confirm password' 8 40"
    if [ -z "$ANS" ] ; then
       echo "Invalid password entered.  Please enter a password." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    USERPWCONFIRM="$ANS"
    if [ "$USERPWCONFIRM" = "$USERPW" ] ; then break; fi
    dialog --title "$TITLE" --yesno 'Password mismatch, try again?' 8 30
    if [ $? -eq 0 ] ; then continue ; fi
    exit_to_menu "Failed setting password."
  done

}

get_user_name()
{
  while :
  do
    #Ask for user name and make sure it is not empty
    get_dlg_ans "--inputbox 'Enter a username' 8 40"
    if [ -z "$ANS" ] ; then
       echo "Invalid username entered." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    #check for invalid characters
    echo "$ANS" | grep -q '^[a-zA-Z0-9]*$'
    if [ $? -eq 1 ] ; then
       echo "Name contains invalid characters." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    USERNAME="$ANS"
    break
  done

}

change_swap()
{
  while :
  do
    # Ask for new swap size
    get_dlg_ans "--inputbox \"Enter the swap size in MB (current: $SWAPSIZE) \" 8 40"
    if [ -z "$ANS" ] ; then
       echo "Swap size cannot be blank"  >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    # check for invalid characters
    expr 1 + $ANS >/dev/null 2>/dev/null
    if [ $? -ne 0 ] ; then
       echo "Swap size must be a number!" >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    else
       break
    fi
  done
  SWAPSIZE="$ANS"
}

get_user_realname()
{
  while :
  do
    #ask for user's real name
    get_dlg_ans "--inputbox \"Enter the real name for $USERNAME\" 8 40"
    if [ -z "$ANS" ] ; then
       echo "Real name cannot be blank."  >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    fi
    #check for invalid characters
    echo "$ANS" | grep -q '^[a-zA-Z ]*$'
    if [ $? -eq 1 ] ; then
       echo "Name contains invalid characters." >> /tmp/.vartemp.$$
       dialog --tailbox /tmp/.vartemp.$$ 8 35
       rm /tmp/.vartemp.$$
       continue
    else
       break
    fi
  done
  USERREALNAME="$ANS"
}

get_os_flavor()
{
  if [ -z "$osflavors" ] ; then
    return
  fi

  for flavor in $osflavors
  do
	desc=$(jq -r '."iso"."os-flavors"."'${flavor}'"."description"' ${GHOSTBSD_MANIFEST})
	flavorlist="$flavorlist $flavor \"$desc\""
  done

  while :
  do
    get_dlg_ans "--menu \"Select the Operating System Flavor\" 12 65 10 ${flavorlist}"
    if [ -z "$ANS" ] ; then
      echo "Invalid flavor entered."
      continue
    else
      break
    fi
  done
  OSINSTALLFLAVOR="$ANS"

  # If this flavor defines any new packages to install, grab those now
  flavorpkgs=$(jq -r '."iso"."os-flavors"."'$OSINSTALLFLAVOR'"."packages"' ${GHOSTBSD_MANIFEST})
  if [ -n "$flavorpkgs" -a "$flavorpkgs" != "null" ] ; then
    EXTRAPKGS="$flavorpkgs"
  fi

  # Check if the manifest specified an alternative flavor name to install
  altflavor=$(jq -r '."iso"."os-flavors"."'$OSINSTALLFLAVOR'"."flavor"' ${GHOSTBSD_MANIFEST})
  if [ -n "$altflavor" -a "$altflavor" != "null" ] ; then
    OSINSTALLFLAVOR="$altflavor"
  fi
}


get_user_shell()
{
  while :
  do
    get_dlg_ans "--menu \"Select the user shell\" 12 45 10 /bin/sh SH /bin/csh CSH /bin/tcsh TCSH"
    if [ -z "$ANS" ] ; then
      echo "Invalid shell entered."
      continue
    else
      break
    fi
  done
  USERSHELL="$ANS"
}

get_hostname()
{
  while :
  do
    get_dlg_ans "--inputbox \"Enter a system hostname\" 8 35"
      if [ -z "$ANS" ] ; then
      echo "Hostname cannot be blank."  >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 30
      rm /tmp/.vartemp.$$
      continue
      fi
    echo "$ANS" | grep -q '^[a-zA-Z0-9.-]*$'
    if [ $? -eq 1 ] ; then
      echo "Hostname contains invalid characters." >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 48
      rm /tmp/.vartemp.$$
      continue
    else
      break
    fi
  done
  SYSHOSTNAME="$ANS"
}

get_sshd()
{
  SYSSSHD=""
  dialog --title "$TITLE" --yesno 'Enable SSH?' 8 30
  if [ $? -ne 0 ] ; then return ; fi
  SYSSSHD="YES"
}

get_netconfig()
{
  SYSNIC=""
  SYSNICIP=""
  SYSNICDNS=""
  SYSNICMASK=""
  SYSNICROUTE=""

  dialog --title "$TITLE" --yesno 'Enable networking?' 6 30
  if [ $? -ne 0 ] ; then return ; fi

  dOpts="auto \"Automatic DHCP\" on"
  ${PCSYS} detect-nics > /tmp/.dList.$$
  while read i
  do
     d="`echo $i | cut -d ':' -f 1`"
     desc="`echo $i | cut -d '<' -f 2 | cut -d '>' -f 1`"
     dOpts="$dOpts $d \"$desc\" off"
  done < /tmp/.dList.$$
  rm /tmp/.dList.$$
  get_dlg_ans "--radiolist \"Select network card to configure\" 12 50 5 ${dOpts}"
  if [ -z "$ANS" ] ; then
     exit_to_menu "Invalid NIC selected."
  fi
  SYSNIC="$ANS"
  if [ "$SYSNIC" = "auto" ] ; then
     SYSNIC="AUTO-DHCP-SLAAC"
     return
  fi

  #Set IP Address and check for invalid characters
  while :
  do
    get_dlg_ans "--inputbox \"Enter the IP address for $SYSNIC\" 8 40"
      if [ -z "$ANS" ] ; then
      echo "IP address cannot be blank."  >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 30
      rm /tmp/.vartemp.$$
      continue
      fi
    echo "$ANS" | grep -q '^[0-9.]*$'
    if [ $? -eq 1 ] ; then
      echo "IP address contains invalid characters." >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 38
      rm /tmp/.vartemp.$$
      continue
    else
      break
    fi
  done
  SYSNICIP="$ANS"

  #Set Netmask and check for invalid characters
  while :
  do
    get_dlg_ans "--inputbox \"Enter the netmask for $SYSNIC\" 8 40"
      if [ -z "$ANS" ] ; then
      echo "Netmask cannot be blank."  >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 35
      rm /tmp/.vartemp.$$
      continue
    fi
    echo "$ANS" | grep -q '^[0-9.]*$'
    if [ $? -eq 1 ] ; then
      echo "Netmask contains invalid characters." >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 45
      rm /tmp/.vartemp.$$
      continue
    else
      break
    fi
  done
  SYSNICMASK="$ANS"

  #Set DNS and check for invalid characters
  while :
  do
    get_dlg_ans "--inputbox \"Enter the DNS nameserver IP address for $SYSNIC\" 8 40"
      if [ -z "$ANS" ] ; then
      echo "DNS cannot be blank."  >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 35
      rm /tmp/.vartemp.$$
      continue
      fi
    echo "$ANS" | grep -q '^[0-9.]*$'
    if [ $? -eq 1 ] ; then
      echo "DNS nameserver IP address contains invalid characters." >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 45
      rm /tmp/.vartemp.$$
      continue
    else
      break
    fi
  done
  SYSNICDNS="$ANS"

  #Set Gateway and check for invalid characters
  while :
  do
    get_dlg_ans "--inputbox \"Enter the gateway IP address for $SYSNIC\" 8 40"
      if [ -z "$ANS" ] ; then
      echo "Gateway IP address cannot be blank."  >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 35
      rm /tmp/.vartemp.$$
      continue
      fi
    echo "$ANS" | grep -q '^[0-9.]*$'
    if [ $? -eq 1 ] ; then
      echo "Gateway IP address contains invalid characters." >> /tmp/.vartemp.$$
      dialog --tailbox /tmp/.vartemp.$$ 8 45
      rm /tmp/.vartemp.$$
      continue
    else
      break
    fi
  done
  SYSNICROUTE="$ANS"

}

gen_pc-sysinstall_cfg()
{
   # Start the header information
   echo "# Auto-Generated pc-sysinstall configuration" >${CFGFILE}
   echo "installInteractive=no" >>${CFGFILE}
   echo "installMode=fresh" >>${CFGFILE}
   echo "installType=FreeBSD" >>${CFGFILE}
   echo "packageType=pkg" >> ${CFGFILE}

   if [ "`uname -m`" = "amd64" ] ; then
     echo "distFiles=base doc kernel lib32" >> ${CFGFILE}
   else
     echo "distFiles=base doc kernel" >> ${CFGFILE}
   fi

   if [ -e "/trueos-media-network" ] ; then
     # Doing install from network media
     echo "installMedium=ftp" >>${CFGFILE}
     echo "ftpPath=ftpPath=http://download.trueos.org/iso/%VERSION%/%ARCH%/dist" >>${CFGFILE}
   else
     # Doing local installation
     echo "installMedium=local" >>${CFGFILE}
     echo "localPath=/dist/FreeBSD:$(uname -r | cut -d '.' -f 1 | cut -d '-' -f 1):$(uname -m)/latest" >>${CFGFILE}
   fi

   if [ -n "$SYSHOSTNAME" ] ; then
      echo "" >> ${CFGFILE}
      echo "hostname=$SYSHOSTNAME" >> ${CFGFILE}
   fi
   if [ -n "$SYSNIC" ] ; then
      echo "" >> ${CFGFILE}
      echo "netSaveDev=$SYSNIC" >> ${CFGFILE}
      if [ "$SYSNIC" != "AUTO-DHCP-SLAAC" ] ; then
        echo "netSaveIP_${SYSNIC}=$SYSNICIP" >> ${CFGFILE}
        echo "netSaveMask_${SYSNIC}=$SYSNICMASK" >> ${CFGFILE}
        echo "netSaveNameServer=$SYSNICDNS" >> ${CFGFILE}
        echo "netSaveDefaultRouter=$SYSNICROUTE" >> ${CFGFILE}
      fi
   fi

   # Set the ashift size
   echo "" >> ${CFGFILE}
   echo "# Set the ZFS blocksize (ashift)" >> ${CFGFILE}
   echo "ashift=${ASHIFTSIZE}" >> ${CFGFILE}

   # Set the default pool name
   echo "# Set the ZFS pool name" >> ${CFGFILE}
   echo "zpoolName=${POOLNAME}" >> ${CFGFILE}

   # Set a base flavor if specified
   if [ -n "$OSINSTALLFLAVOR" ] ; then
     echo "# Set the os base flavor" >> ${CFGFILE}
     echo "baseFlavor=${OSINSTALLFLAVOR}" >> ${CFGFILE}
   fi

   # Now do the disk block
   echo "" >> ${CFGFILE}
   echo "# Disk Setup for $SYSDISK" >> ${CFGFILE}
   echo "disk0=$SYSDISK" >> ${CFGFILE}
   echo "partition=$DISKPART" >> ${CFGFILE}
   echo "bootManager=${SYSBOOTMANAGER}" >> ${CFGFILE}
   echo "partscheme=$DISKFORMAT" >> ${CFGFILE}
   echo "commitDiskPart" >> ${CFGFILE}

   # Now the partition block
   echo "" >> ${CFGFILE}
   echo "# Partition Setup for ${SYSDISK}($DISKPART)" >> ${CFGFILE}
   echo "# All sizes are expressed in MB" >> ${CFGFILE}
   echo "# Avail FS Types, UFS, UFS+S, UFS+SUJ, UFS+J, ZFS, SWAP" >> ${CFGFILE}
   echo "# UFS.eli, UFS+S.eli, UFS+SUJ, UFS+J.eli, ZFS.eli, SWAP.eli" >> ${CFGFILE}

   # What file-system are we using now?
   FSTAG="ZFS"
   if [ "$USINGGELI" = "YES" ] ; then FSTAG="ZFS.eli"; fi

   # Doing a single disk zpool, or a mirror/raidz[1-3]?
   if [ "$ZPOOL_TYPE" = "single" ] ; then
     echo "disk0-part=$FSTAG 0 ${ZFSLAYOUT}" >> ${CFGFILE}
   else
     echo "disk0-part=$FSTAG 0 ${ZFSLAYOUT} (${ZPOOL_TYPE}: `echo $ZPOOL_DISKS | sed 's|/dev/||g'`)" >> ${CFGFILE}
   fi

   # If using GELI encryption, add it to config file
   if [ "$USINGGELI" = "YES" ] ; then
     echo "encpass=$GELIPASS" >> ${CFGFILE}
   fi

   echo "disk0-part=SWAP.eli ${SWAPSIZE} none" >> ${CFGFILE}
   echo "commitDiskLabel" >> ${CFGFILE}
   echo "" >> ${CFGFILE}

   # Are there packages to install out of box?
   if [ -e "/root/auto-dist-install" ] ; then
     echo "installPackages=$(cat /root/auto-dist-install | tr -s '\n' ' ') ${EXTRAPKGS}" >> ${CFGFILE}
   fi
   echo "" >> ${CFGFILE}
   echo "" >> ${CFGFILE}

   # Since on TrueOS, lets save username / passwords
   echo "rootPass=${ROOTPW}" >> ${CFGFILE}
   echo "" >> ${CFGFILE}
   if [ -n "${USERNAME}" ] && [ -n "${USERPW}" ] && [ -n "${USERSHELL}" ] ; then
     echo "userName=${USERNAME}" >> ${CFGFILE}
     echo "userComment=${USERREALNAME}" >> ${CFGFILE}
     echo "userPass=${USERPW}" >> ${CFGFILE}
     echo "userShell=${USERSHELL}" >> ${CFGFILE}
     echo "userHome=/home/${USERNAME}" >> ${CFGFILE}
     echo "userGroups=wheel,operator,video" >> ${CFGFILE}
     echo "commitUser" >> ${CFGFILE}
   fi


   # Last cleanup stuff
   echo "" >> ${CFGFILE}
   echo "runCommand=newaliases" >> ${CFGFILE}


   # Are we enabling SSHD?
   if [ "$SYSSSHD" = "YES" ] ; then
     if [ -e "/sbin/openrc" ] ; then
       echo "runCommand=rc-update add sshd default" >> ${CFGFILE}
     else
       echo "runCommand=sysrc -f /etc/rc.conf sshd_enable=\"YES\"" >> ${CFGFILE}
     fi
     grep -q "userName=" ${CFGFILE}
     if [ $? -ne 0 ] ; then
       #No user created  - make sure we enable root access over SSH too
       echo 'runCommand=echo "PermitRootLogin yes" >> /etc/ssh/sshd_config' >> ${CFGFILE}
     fi
   fi

   # Check for any post-install commands
   if [ -e "${PIJSON}" ]; then
     CMDLEN=$(jq -r '. | length' ${PIJSON})
     if [ $CMDLEN -gt 0 ] ; then
       i=0
       while [ $i -lt $CMDLEN ]
       do
         internal=$(cat ${PIJSON} | jq -r ".[${i}]" | jq -r '."chroot"')
         cmd=$(cat ${PIJSON} | jq -r ".[${i}]" | jq -r '."command"')
	 if [ "$internal" = "true" ] ; then
	   echo "runCommand=${cmd}" >> ${CFGFILE}
	 else
	   echo "runExtCommand=${cmd}" >> ${CFGFILE}
	 fi
         i=$(expr $i + 1)
       done
     fi
   fi

}

change_disk_selection() {
  get_target_disk
  get_target_part
  gen_pc-sysinstall_cfg
}

start_full_wizard()
{
  # Start the wizard
  get_sys_type
  if [ -z "${install_pages}" ] ; then
    install_pages="os_flavor disk"
    if [ "$SYSTYPE" = "server" ] ; then
      install_pages="${install_pages} root_pw create_user networking"
    fi
  fi

  #Go through pages in designated order
  for page in ${install_pages}
  do
    case "${page}" in
      os_flavor)
        get_os_flavor
        ;;
      root_pw)
        get_root_pw
        ;;
      create_user) 
        get_user_name
        get_user_realname
        get_user_pw
        get_user_shell
        ;;
      disk) 
        get_target_disk
        get_target_part
        ;;
      networking)
        change_networking
        ;;
      pool_name)
        change_zpool_name
        ;;
    esac
  done
  gen_pc-sysinstall_cfg
}

# Adjust network options
change_networking() {
  get_hostname
  get_netconfig
  get_sshd
  gen_pc-sysinstall_cfg
}

start_edit_menu_loop()
{

  while :
  do
    dialog --title "${BRAND} Text Install - Edit Menu" --menu "Select:" 18 70 10 disk "Change disk ($SYSDISK)" pname "ZFS pool name" pool "ZFS pool layout" datasets "ZFS datasets" zpoolcfg "ZFS Pool Config" network "Change networking" swap "Change swap size" view "View install script" edit "Edit install script" back "Back to main menu" 2>/tmp/answer
    if [ $? -ne 0 ] ; then break ; fi

    ANS="`cat /tmp/answer`"

    case $ANS in
       disk) change_disk_selection
             ;;
       pname) change_zpool_name
             ;;
       pool) change_zpool
	     ;;
   datasets) change_zfs
	     ;;
   zpoolcfg) change_zpool_cfg
	     ;;
    network) change_networking
	     ;;
       swap) change_swap
	     gen_pc-sysinstall_cfg
	     ;;
       view) more ${CFGFILE}
             rtn
             ;;
       edit) vi ${CFGFILE}
             rtn
             ;;
       back) break ;;
          *) ;;
    esac
  done

}

start_menu_loop()
{

  while :
  do
    dialog --title "${BRAND} Text Install" --menu "Select:" 18 40 10 install "Start the installation" wizard "Re-run install wizard" edit "Edit install settings" hardware "check compatibility" quit "Quit install wizard" 2>/tmp/answer
    if [ $? -ne 0 ] ; then break ; fi

    ANS="`cat /tmp/answer`"

    case $ANS in
     wizard) start_full_wizard
             ;;
       edit) start_edit_menu_loop
             ;;
    install) dialog --title "$TITLE" --yesno 'Begin the installation?' 8 30
             if [ $? -eq 0 ] ; then
                ${PCSYS} -c ${CFGFILE}
                rtn
             fi
             ;;
   hardware) get_hardware_info
	     ;;
       quit) break ;;
          *) ;;
    esac
  done
  # added "exit 0" here because installer seems to loopback to wizard
  exit 0
}

# Load default settings from TrueOS Manifest
load_manifest_defaults()
{
	# Check if default pool name is specified
	newpool=$(jq -r '."iso"."pool"."name"' ${GHOSTBSD_MANIFEST})
	if [ -n "$newpool" -a "$newpool" != "null" ] ; then
		POOLNAME="$newpool"
	fi

	# Check if list of flavors provided in manifest
	osflavors=$(jq -r '."iso"."os-flavors" | keys[]' ${GHOSTBSD_MANIFEST} 2>/dev/null | tr -s '\n' ' ')
	#Load the list of install steps that are desired
	install_pages=$(jq -r '."iso"."install-dialog"."pages"[]' ${GHOSTBSD_MANIFEST} 2>/dev/null | tr -s '\n' ' ')
	if [ "${install_pages}" = "null" ] ; then install_pages="" ; fi
}

if [ -e "$GHOSTBSD_MANIFEST" ] ; then
	load_manifest_defaults
fi


if [ -e "$CFGFILE" ] ; then
   cp ${CFGFILE} ${CFGFILE}.bak
   rm ${CFGFILE}
fi

start_full_wizard
start_menu_loop

exit 0
